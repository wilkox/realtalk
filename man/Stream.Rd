% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stream.R
\name{Stream}
\alias{Stream}
\title{R6 Class Representing A Stream}
\description{
Represents a streaming session with the OpenAI Realtime API
}
\seealso{
\link{log_path}

\link{log}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{bg_process}}{The callr background R process in which the websocket
and streaming loops are instantiated}

\item{\code{bg_close_path}}{The path for a temporary file used to signal the
background process to close}

\item{\code{text_out_path}}{The path for a temporary file containing the text
output buffer from the assistant. This allows for reading of the text
out stream in real time, as the event log is not generated until the
stream is completed.}

\item{\code{audio_out_buffer_path}}{The path for temporary file containing the
audio out buffer. New audio response deltas are appended to this buffer.}

\item{\code{eventlog}}{The EventLog for the stream}

\item{\code{log}}{Function to write to the local log (as distinct from the
stream EventLog). This is a field holding a static function, not a
method, to allow the function to be passed into sub-processes.}

\item{\code{log_path}}{Path to the local log (as distinct from the stream
EventLog).}

\item{\code{A}}{message which will be passed (as a system text message) after
each model audio output finishes}

\item{\code{The}}{path in which the status message will be buffered}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{A}}{message which will be passed (as a system text message) after
each model audio output finishes}

\item{\code{The}}{path in which the status message will be buffered}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Stream-conversation}{\code{Stream$conversation()}}
\item \href{#method-Stream-audio_transcript}{\code{Stream$audio_transcript()}}
\item \href{#method-Stream-transcript}{\code{Stream$transcript()}}
\item \href{#method-Stream-text_received}{\code{Stream$text_received()}}
\item \href{#method-Stream-start_streaming}{\code{Stream$start_streaming()}}
\item \href{#method-Stream-stop_streaming}{\code{Stream$stop_streaming()}}
\item \href{#method-Stream-new}{\code{Stream$new()}}
\item \href{#method-Stream-send_text}{\code{Stream$send_text()}}
\item \href{#method-Stream-close}{\code{Stream$close()}}
\item \href{#method-Stream-ready_state}{\code{Stream$ready_state()}}
\item \href{#method-Stream-set_status_message}{\code{Stream$set_status_message()}}
\item \href{#method-Stream-clone}{\code{Stream$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-conversation"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-conversation}{}}}
\subsection{Method \code{conversation()}}{
Return a tibble of all conversation items (i.e. text and audio messages)
in the stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$conversation()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-audio_transcript"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-audio_transcript}{}}}
\subsection{Method \code{audio_transcript()}}{
Return a formatted, plain-text transcript of the audio streams only
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$audio_transcript()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-transcript"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-transcript}{}}}
\subsection{Method \code{transcript()}}{
Print a formatted transcript of the completed stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$transcript()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-text_received"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-text_received}{}}}
\subsection{Method \code{text_received()}}{
Return all text messages received from the stream in real time. Useful
for polling for text output while the stream is still running.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$text_received()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of text messages received
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-start_streaming"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-start_streaming}{}}}
\subsection{Method \code{start_streaming()}}{
Open a WebSocket streaming connection to OpenAI Realtime API and begin
bidirectional text and audio streaming. The streaming loops are
encapsulated in a callr subprocess, which is stored in the bg_process
slot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$start_streaming(
  api_key = lemur::openai_api_key(verbose = FALSE),
  model = "gpt-4o-realtime-preview-2024-12-17",
  voice = "ballad"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_key}}{Your long-term OpenAI API key. Defaults to
\code{Sys.getenv("OPENAI_API_KEY")}.}

\item{\code{model}}{A character string specifying the model. Defaults to
\code{lemur::openai_api_key()}.}

\item{\code{voice}}{A character string specifying the voice to use. Defaults to
"ballad".}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No return
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-stop_streaming"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-stop_streaming}{}}}
\subsection{Method \code{stop_streaming()}}{
Ends live audio streaming
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$stop_streaming()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
No return
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-new"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-new}{}}}
\subsection{Method \code{new()}}{
Set up the Stream object

Send a text message to the stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-send_text"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-send_text}{}}}
\subsection{Method \code{send_text()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$send_text(text, role = "user", trigger_response = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{A character string to send.}

\item{\code{role}}{The role, either "user" (default) or "system".}

\item{\code{trigger_response}}{Whether to send a "response.create" signal to
trigger a response. Defaults to FALSE}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-close"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-close}{}}}
\subsection{Method \code{close()}}{
Close the stream
Report the current ready state of the stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$close()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-ready_state"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-ready_state}{}}}
\subsection{Method \code{ready_state()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$ready_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer representing the state of the connection: 0L =
Connecting, 1L = Open, 2L = Closing, 3L = Closed.
Set the status message

The status message is sent (as a text message with the 'system' role)
after each system audio output message
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-set_status_message"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-set_status_message}{}}}
\subsection{Method \code{set_status_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$set_status_message(status_message)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
