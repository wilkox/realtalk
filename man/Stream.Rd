% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stream.R
\name{Stream}
\alias{Stream}
\title{R6 Class Representing A Stream}
\description{
Represents a streaming session with the OpenAI Realtime API
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{websocket}}{The websocket::WebSocket object}

\item{\code{bg_process}}{The callr background R process in which the websocket
and the main streaming loop are instantiated}

\item{\code{bg_close_path}}{The path for a temporary file used to signal the
background process to close}

\item{\code{eventlog}}{The EventLog for a completed stream. Will be NULL until
stop_streaming() has been called.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Stream-transcript}{\code{Stream$transcript()}}
\item \href{#method-Stream-start_streaming}{\code{Stream$start_streaming()}}
\item \href{#method-Stream-stop_streaming}{\code{Stream$stop_streaming()}}
\item \href{#method-Stream-new}{\code{Stream$new()}}
\item \href{#method-Stream-send_text}{\code{Stream$send_text()}}
\item \href{#method-Stream-close}{\code{Stream$close()}}
\item \href{#method-Stream-ready_state}{\code{Stream$ready_state()}}
\item \href{#method-Stream-clone}{\code{Stream$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-transcript"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-transcript}{}}}
\subsection{Method \code{transcript()}}{
A transcript of the text and audio conversation so far
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$transcript()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-start_streaming"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-start_streaming}{}}}
\subsection{Method \code{start_streaming()}}{
Open a WebSocket streaming connection to OpenAI Realtime API and begin
bidirectional audio streaming. The streaming loop will be encapsulated
in a callr subprocess, which is stored in the bg_process slot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$start_streaming(
  api_key = lemur::openai_api_key(verbose = FALSE),
  model = "gpt-4o-realtime-preview-2024-12-17",
  voice = "ballad"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_key}}{Your long-term OpenAI API key. Defaults to
\code{Sys.getenv("OPENAI_API_KEY")}.}

\item{\code{model}}{A character string specifying the model. Defaults to
\code{lemur::openai_api_key()}.}

\item{\code{voice}}{A character string specifying the voice to use. Defaults to
"ballad".}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
No return
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-stop_streaming"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-stop_streaming}{}}}
\subsection{Method \code{stop_streaming()}}{
Ends live audio streaming
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$stop_streaming()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
No return
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-new"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-new}{}}}
\subsection{Method \code{new()}}{
Set up the Stream object

Send a text message to the stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-send_text"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-send_text}{}}}
\subsection{Method \code{send_text()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$send_text(text, response_modalities = c("text"), role = "user")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{A character string to send.}

\item{\code{response_modalities}}{The modalit(y|ies) that the model should respond
in. Either "text" or c("audio", "text"). Defaults to text only.}

\item{\code{role}}{The role, either "user" (default) or "system".}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-close"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-close}{}}}
\subsection{Method \code{close()}}{
Close the stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$close()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-ready_state"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-ready_state}{}}}
\subsection{Method \code{ready_state()}}{
Report the current ready state of the stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$ready_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An integer representing the state of the connection: 0L =
Connecting, 1L = Open, 2L = Closing, 3L = Closed.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
