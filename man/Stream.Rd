% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stream.R
\name{Stream}
\alias{Stream}
\title{R6 Class Representing A Stream}
\description{
Represents a streaming session with the OpenAI Realtime API
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{eventlog}}{The EventLog for the stream, an EventLog object}

\item{\code{logger}}{The Logger instance for structured logging}

\item{\code{process_manager}}{The ProcessManager for monitoring background processes
Wait until the current or next response is finished}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Stream-wait_for_response}{\code{Stream$wait_for_response()}}
\item \href{#method-Stream-conversation}{\code{Stream$conversation()}}
\item \href{#method-Stream-transcript}{\code{Stream$transcript()}}
\item \href{#method-Stream-start_streaming}{\code{Stream$start_streaming()}}
\item \href{#method-Stream-is_ready}{\code{Stream$is_ready()}}
\item \href{#method-Stream-stop_streaming}{\code{Stream$stop_streaming()}}
\item \href{#method-Stream-new}{\code{Stream$new()}}
\item \href{#method-Stream-send_text}{\code{Stream$send_text()}}
\item \href{#method-Stream-set_status_message}{\code{Stream$set_status_message()}}
\item \href{#method-Stream-error_history}{\code{Stream$error_history()}}
\item \href{#method-Stream-process_status}{\code{Stream$process_status()}}
\item \href{#method-Stream-view_log}{\code{Stream$view_log()}}
\item \href{#method-Stream-clone}{\code{Stream$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-wait_for_response"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-wait_for_response}{}}}
\subsection{Method \code{wait_for_response()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$wait_for_response(timeout = 60)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timeout}}{Maximum time in seconds to wait before returning an
error, defaults to 60
Return all text and transcribed audio messages in the stream}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-conversation"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-conversation}{}}}
\subsection{Method \code{conversation()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$conversation()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A tibble of all text and transcribed audio messages in the stream
Print a formatted transcript of the stream
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-transcript"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-transcript}{}}}
\subsection{Method \code{transcript()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$transcript()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL, invisibly
Start the streaming session

Opens a WebSocket streaming connection to the OpenAI Realtime API and
starts bidirectional text and audio streaming. The streaming loops are
managed by background processes.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-start_streaming"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-start_streaming}{}}}
\subsection{Method \code{start_streaming()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$start_streaming(
  api_key = openai_api_key(verbose = FALSE),
  model = "gpt-4o-realtime-preview-2024-12-17",
  voice = "ballad"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_key}}{Your long-term OpenAI API key. Defaults to
\code{openai_api_key(verbose = FALSE)}.}

\item{\code{model}}{A string specifying the model. Defaults to
\code{"gpt-4o-realtime-preview-2024-12-17"}.}

\item{\code{voice}}{A string specifying the voice to use. Defaults to "ballad".

Report whether the stream is ready}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-is_ready"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-is_ready}{}}}
\subsection{Method \code{is_ready()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$is_ready()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A logical value indicating if the stream is ready to use
Stop the streaming session

Disconnects from the API and shuts down background I/O processes.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-stop_streaming"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-stop_streaming}{}}}
\subsection{Method \code{stop_streaming()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$stop_streaming()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL, invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-new"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-new}{}}}
\subsection{Method \code{new()}}{
Create a new Stream object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$new(.quiet = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{.quiet}}{If TRUE, suppress startup messages}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a Stream object
Send a text message to the stream
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-send_text"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-send_text}{}}}
\subsection{Method \code{send_text()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$send_text(text, role = "user", trigger_response = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{A string to send}

\item{\code{role}}{The role, either "user" (default) or "system"}

\item{\code{trigger_response}}{Whether to trigger a response from the API.
Defaults to FALSE
Set the status message

The status message is sent (as a text message with the 'system' role)
after each assistant audio output message.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-set_status_message"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-set_status_message}{}}}
\subsection{Method \code{set_status_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$set_status_message(status_message)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{status_message}}{String, the status message to be set.
Get error history for background processes}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-error_history"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-error_history}{}}}
\subsection{Method \code{error_history()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$error_history(process_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{process_name}}{Optional name of specific process; if NULL, returns
error information for all processes}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list containing error information for the processes
Get status of all background processes
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-process_status"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-process_status}{}}}
\subsection{Method \code{process_status()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$process_status()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list containing status information for all managed processes
View logs for the stream

Retrieves logs from the Logger instance, optionally filtered by level,
component, or pattern.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-view_log"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-view_log}{}}}
\subsection{Method \code{view_log()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$view_log(level = NULL, component = NULL, pattern = NULL, n = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{level}}{Optional log level to filter by: "INFO", "WARNING", or "ERROR"}

\item{\code{component}}{Optional component name to filter by}

\item{\code{pattern}}{Optional text pattern to search for in logs}

\item{\code{n}}{Optional maximum number of log entries to return}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A character vector of log entries
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Stream-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Stream-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Stream$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
